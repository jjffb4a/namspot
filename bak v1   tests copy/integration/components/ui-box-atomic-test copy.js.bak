import { module, test } from 'qunit';
import { setupRenderingTest } from 'ember-qunit';
import { render, fillIn, settled } from '@ember/test-helpers';
import { hbs } from 'ember-cli-htmlbars';

module('Integration | Component | ui-box', function (hooks) {
  setupRenderingTest(hooks);

  test('it renders and filters names', async function (assert) {
    this.set('names', [
      { id: '1', text: 'Alice went to Berlin' },
      { id: '2', text: 'Clara likes Ember.js' },
      { id: '3', text: 'Bob and Eva' }
    ]);
    this.set('query', 'bob');
    this.set('onSearch', (value) => this.set('query', value));

    await render(hbs`
      <UiBox
        @names={{this.names}}
        @query={{this.query}}
        @onSearch={{this.onSearch}}
      />
    `);

    // âœ… More helpful breakdown
    assert.dom('input').exists('Input is present at start');
    assert.dom('ul li').exists({ count: 3 }, 'Initially renders 3 list items');

    await fillIn('input', 'clara');
    await settled(); // ðŸŸ¡ Important for DOM stability

    assert.dom('ul li').exists({ count: 1 }, 'After typing clara, only 1 match remains');
    assert.dom('ul').includesText('Clara likes Ember.js');
    assert.ok(
      this.element.querySelector('ul li')?.innerHTML.includes('<mark>Clara</mark>'),
      'Clara is highlighted with <mark>'
    );
  });
});



/*
import { module, test } from 'qunit';
import { setupRenderingTest } from 'ember-qunit';
import { render, fillIn, settled } from '@ember/test-helpers';
import { hbs } from 'ember-cli-htmlbars';

module('Integration | Component | ui-box (atomic)', function (hooks) {
  setupRenderingTest(hooks);

  test('renders static UI elements', async function (assert) {
    this.setProperties({
      names: [],
      query: '',
      onSearch: () => {}
    });

    await render(hbs`
      <UiBox
        @names={{this.names}}
        @query={{this.query}}
        @onSearch={{this.onSearch}}
      />
    `);

    assert.dom('label').hasText('Search:');
    assert.dom('input[placeholder="Try Alice, Bob, etc."]').exists();
    assert.dom('ul').exists();
  });

  test('renders a list of names', async function (assert) {
    this.setProperties({
      query: '',
      onSearch: () => {},
      names: [
        { id: '1', text: 'Alice' },
        { id: '2', text: 'Bob' }
      ]
    });

    await render(hbs`
      <UiBox
        @names={{this.names}}
        @query={{this.query}}
        @onSearch={{this.onSearch}}
      />
    `);

    assert.dom('ul li').exists({ count: 2 });
    assert.dom('ul').hasText('Alice');
    assert.dom('ul').hasText('Bob');
  });

  test('filters names case-insensitively', async function (assert) {
    this.setProperties({
      query: 'alice',
      onSearch: () => {},
      names: [
        { id: '1', text: 'Alice' },
        { id: '2', text: 'Bob' }
      ]
    });

    await render(hbs`
      <UiBox
        @names={{this.names}}
        @query={{this.query}}
        @onSearch={{this.onSearch}}
      />
    `);

    assert.dom('ul li').exists({ count: 1 });
    assert.dom('ul li').includesText('Alice');
    assert.dom('ul li').hasTextContaining('Alice');
  });

  test('highlights matched text in <mark>', async function (assert) {
    this.setProperties({
      query: 'bob',
      onSearch: () => {},
      names: [
        { id: '1', text: 'Alice' },
        { id: '2', text: 'Bob and Eva' }
      ]
    });

    await render(hbs`
      <UiBox
        @names={{this.names}}
        @query={{this.query}}
        @onSearch={{this.onSearch}}
      />
    `);

    assert.dom('ul li').exists({ count: 1 });
    assert.dom('ul li').includesText('Bob');
    assert.ok(
      this.element.querySelector('ul li')?.innerHTML.includes('<mark>Bob</mark>'),
      'Bob is highlighted with <mark>'
    );
  });

  test('reacts to input via @onSearch callback', async function (assert) {
    let actualQuery = '';
    this.set('names', [
      { id: '1', text: 'Clara' },
      { id: '2', text: 'Eva' }
    ]);
    this.set('query', '');
    this.set('onSearch', (val) => {
      actualQuery = val;
      this.set('query', val);
    });

    await render(hbs`
      <UiBox
        @names={{this.names}}
        @query={{this.query}}
        @onSearch={{this.onSearch}}
      />
    `);

    await fillIn('input', 'clara');
    await settled();

    assert.strictEqual(actualQuery, 'clara', 'Query was passed via onSearch');
    assert.dom('ul li').exists({ count: 1 });
    assert.dom('ul li').includesText('Clara');
  });
});
*/